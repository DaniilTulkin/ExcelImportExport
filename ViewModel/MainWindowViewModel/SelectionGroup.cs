using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace ExcelImportExport
{
    public partial class MainWindowViewModel : ModelBase
    {
        /// <summary>
        /// Attached property (defenetly only DataGrid)
        /// </summary>
        #region attached property

        public static readonly DependencyProperty DataGridProperty = DependencyProperty
            .RegisterAttached("DataGrid", typeof(DataGrid), typeof(MainWindowViewModel), new FrameworkPropertyMetadata(OnDataGridChanged));

        public static void SetDataGrid(DependencyObject element, DataGrid value)
        {
            element.SetValue(DataGridProperty, value);
        }

        public static DataGrid GetDataGrid(DependencyObject element)
        {
            return (DataGrid)element.GetValue(DataGridProperty);
        }        

        #endregion

        private MainWindowModelService MainWindowModelService;

        private bool isEnabled;
        public bool IsEnabled
        {
            get
            {
                return isEnabled;
            }
            set
            {
                isEnabled = value;
                OnPropertyChanged("IsEnabled");
            }
        }

        private List<Category> categoryList;
        public List<Category> CategoryList
        {
            get
            {
                return categoryList;
            }
            set
            {
                categoryList = value;
                OnPropertyChanged("CategoryList");
            }
        }

        private Category selectedCategory;
        public Category SelectedCategory
        {
            get
            {
                return selectedCategory;
            }
            set
            {
                selectedCategory = value;
                OnPropertyChanged("SelectedCategory");
            }
        }

        private bool isType;
        public bool IsType
        {
            get
            {
                return isType;
            }
            set
            {
                isType = value;
                OnPropertyChanged("IsType");
            }
        }

        private List<DynamicDictionaryWrapper> elementInformationList;
        public List<DynamicDictionaryWrapper> ElementInformationList
        {
            get
            {
                return elementInformationList;
            }
            set
            {
                elementInformationList = value;
                OnPropertyChanged("ElementInformationList");
            }
        }

        private static DataGrid dataGrid = null;
        private static void OnDataGridChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            dataGrid = d as DataGrid;
        }

        public MainWindowViewModel(UIApplication app)
        {
            MainWindowModelService = new MainWindowModelService(app);
            CategoryList = MainWindowModelService.PopulateCategories();
            WorksetsList = MainWindowModelService.GetWorksets();
        }

        public ICommand cmbCategoryChanged => new RelayCommandWithoutParameter(OncmbCategoryChanged);
        private void OncmbCategoryChanged()
        {
            ElementInformationList = MainWindowModelService.PopulateElementInformation(selectedCategory, isType);
            if (ElementInformationList != null)
            {
                OndtAutoGeneratedColumns();
                IsEnabled = true;

                PropertiesList = ElementInformationList.FirstOrDefault().GetDynamicMemberNames().OrderBy(s => s).ToList();
            }
            else
            {
                dataGrid.Columns.Clear();
                IsEnabled = false;
            }
        }

        public ICommand rdbType => new RelayCommandWithoutParameter(OnrdbType);
        private void OnrdbType()
        {
            IsType = true;
            OncmbCategoryChanged();
        }

        public ICommand rdbInstance => new RelayCommandWithoutParameter(OnrdbInstance);
        private void OnrdbInstance()
        {
            IsType = false;
            OncmbCategoryChanged();
        }

        public ICommand dtAutoGeneratedColumns => new RelayCommandWithoutParameter(OndtAutoGeneratedColumns);
        private void OndtAutoGeneratedColumns()
        {
            MainWindowModelService.AutoGeneratedColumns(dataGrid);
        }

        public ICommand btnApply => new RelayCommandWithoutParameter(OnbtnApply);
        private void OnbtnApply()
        {
            MainWindowModelService.WriteParametersToModel(ElementInformationList);
        }

    }
}
